mconotify - orchestrating your systems autodynamagically using a Puppet report processor

This report processor uses tags on Puppet resource/class definitions to send mcollective RPC messages to snodes or classes of nodes to trigger configuration updates for dependent resource sets.

Consider this resource definition:

  file { '/tmp/testfile':
    ensure => file,
    tag  => ['mconotify:-class:-theclass','mconotify:-node:-ibroketheinternet.co.uk'],
    source => '/etc/passwd',
  }

When processing the agent report on the Puppet master, the mconotify report code will examine the tags on each resource in the report.  If the report has the status 'changed' and a resource that is appropriately tagged in the report (i.e. with 'mconotify:something:somethingelse') has also changed, then a mco client with appropriate filters will be built and a message sent to the collective.

Note: the tag delimiter is a bit shit - the tagging code uses the following regex /^\w[-\w:.]*$/ to determine whether a tag is valid - I'm using ':-' but you could choose something else.  '::' seemed like a good idea for about 5 minutes until I started doing class filters, and at that point it broke, hard.  If this starts to look like a good idea, other data might be better in a tag.

Prerequisites:

An mcollective
An mcollective client.cfg for the user running Puppet to use to build the config
Some resources
